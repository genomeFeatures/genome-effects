#!/usr/bin/perl
#***********************************************************************************************
# This script loads the gene annotation data info of an
# organism,a given assembly built, the annotation name into our database
# Tables affected: transcript,exon,transcript_by_annotation,
#                  transcript_exon, transcript_translation,gene_by_annotation
#                  gene_prediction_by_organism
#
#Usage:
#   perl load_Annotations.pl -d output_directory -f filename -a annotation -v organism_version [-s 0][-e 1]

#Arguments:
#   -h  displays this help message
#   -d  Annotations directory (base directory for annotations)
#   -f  gene annotations input file
#   -a  gene prediction source name . Example: ensGene,refGene,vegaGene,...mgiGene
#   -v  Organism version (mm9,mm8, hg19,...) default mm9
#   -s  specifies whether or not the source uses zero-base or 1-base for feature start (exon, transcript,cds)
#       1 -> 1-base; 0-> zero-base (default)
#   -e  specifies whether or not the feature annotation use zero-base or 1-base for feature start (exon, transcript,cds)
#        0-> zero-base; 1 -> 1-base(default)
#  

#Examples:
#cmd: ./load_Annotations.pl -d /scratch/data/downloads/mgi -f annotations_file -a GRCm38-mgiGene -v mm10 -s 1 -e 1

# Author: Lucie N. Hutchins
#         Scientific Software Engineer
#
# Date : April 2012
#
#Note:
q{I reviewed  UCSC ,MGI,Ensembl, and Ebi (miRNA) cordinates and here is what I found:
UCSC  internal database representations of coordinates always have a zero-based start and a one-based end.They add 1 to the start before displaying coordinates in the Genome Browser. Therefore, they appear as one-based start, one-based end in the graphical display.

MGI GFF3: has the start and end of the feature  in 1-based integer coordinates.
Ensembl: has the start and end of the feature  in 1-based integer coordinates
Ebi : has the start and end of the feature  in 1-based integer coordinates (assumption based on ensembl)
Uniprot: ?
DOmiceRNAseqRUM (RNASEQ) : has  a zero-based start and a one-based end
CC Founders (Al) : have a zero-based start and a one-based end (the .txt files generated by gftToGenePred)

Knowing this makes it easier to integreate new datasets into our transcript database and adjust the cordinates to UCSC standard.
The reason being UCSC  has more organisms than any other source we currently load.
So this is what I intend to do:
For every new transcript source other than UCSC, set every starts and ends as needed.
This will include: transcript, exon, and CDS
};
#********************************************************************************************
## set default variables
$dbname="graber_transcriptdb";
$host="harlequin"; $user="lnh";$pass="lucie98";
#$oversion="mm9";$gene_prediction="mgiGene";
$start_base=0; $end_base=1;
use DBI;use vars qw ($opt_h $opt_f $opt_d $opt_a $opt_v $opt_s $opt_e);
use Getopt::Std;use LWP 5.64;
#use Time::localtime;
use Time::localtime;
my $browser = LWP::UserAgent->new;
   $browser->timeout(10);$browser->env_proxy;
   $browser->agent('Mozilla/5.0');

getopts('hd:f:a:v:s:e:');
if(($opt_h)|| !($opt_f||$opt_d||$opt_a||$opt_v)){
    print <<HELP;

 This script loads a given gene annotation data
 into Graber Transcript database

Usage:
   perl load_Annotations.pl -d base_directory -f filename -a annotation -v organism_version [-s 0][-e 1]

Arguments:
   -h  displays this help message
   -d  required, Annotations directory (base directory for annotations)
   -f  required, gene annotations input file
   -a  required, gene prediction source name . Example: ensGene,refGene,vegaGene,...mgiGene
   -v  required, Organism version (mm9,mm8,mm10, hg19,...) 
   -s  optional, specifies whether or not the source uses zero-base or 1-base for feature start (exon, transcript,cds)
                 1 -> 1-base; 0-> zero-base (default)
   -e  optional, specifies whether or not the source uses zero-base or 1-base for feature end(exon, transcript,cds)
                   0-> zero-base; 1 -> 1-base(default)  

Examples:
cmd: ./load_Annotations.pl -d /scratch/data/downloads/mgi -f /scratch/data/downloads/mgi/mm9-mgiGene.txt -a mm9-mgiGene -v mm9 -s 1 -e 1
cmd: ./load_Annotations.pl -d /scratch/data/downloads/rnaSeq -f /scratch/data/downloads/rnaSeq/mm9_DOmice_RUMtx_20110609.txt -a DOmiceRNAseqRUM -v mm9 -s 0 -e 1
cmd: ./load_Annotations.pl -d /scratch/data/downloads/ensembl/mm10/mus_musculus_core_70_38 -f /scratch/data/downloads/ensembl/mm10/mus_musculus_core_70_38/GRCm38-ensGene.txt -a GRCm38-ensGene -v mm10  -s 1 -e 1
HELP
exit;
}

if(!($opt_a=~/all_mrna/)){
 print "$opt_a annotations already loaded\n";
 exit(0);
}
print "Processing $opt_v:$opt_a\n";
my $dbh = DBI->connect("DBI:mysql:database=$dbname;host=$host;mysql_local_infile=1",$user, $pass);
########## addon ################
## get the date of the last update
my $get_lastUpdate="select schema_version from external_db where db_name=?";
my $qh_lastUpdate= $dbh->prepare($get_lastUpdate);
## update the external_db
my $Update_schema="update external_db set schema_version= ? where db_name=?";
my $qh_Update_schema= $dbh->prepare($Update_schema);

my $qh_insertNewdb=$dbh->prepare("Insert into gene_prediction(gene_prediction_name) values(?)");
my $qh_getNewdbId=$dbh->prepare("select gene_prediction_id from gene_prediction where gene_prediction_name=?");
my $qh_insertExternaldb=$dbh->prepare("insert into external_db values(?,?,?)");
my $qh_deleteSchema=$dbh->prepare("delete from external_db where db_name=?");

my $qh_drop_sample=$dbh->prepare("drop temporary table if exists rnaseq_sample_temp");
my $qh_create_sample=$dbh->prepare("create temporary table if not exists rnaseq_sample_temp(sample_name varchar(50),found tinyint default 0)");
my $qh_loadSample=$dbh->prepare("load data local infile ? into table rnaseq_sample_temp (sample_name)");
my $qh_update_sample=$dbh->prepare("rnaseq_sample_temp  t, rnaseq_sample r set found=1 where t.sample_name=r.sample_name");
my $qh_insert_sample=$dbh->prepare("insert into rnaseq_sample(sample_name) select distinct sample_name from rnaseq_sample_temp where found=0");


########### addon ends #########

my $delete_log="delete from feature_load_log where table_name=?";
my $qh_delete_log = $dbh->prepare($delete_log)or die "Couldn't prepare statement: " . $dbh->errstr;


my $insert_log="insert into feature_load_log(table_name,segment_name,file_line_count,db_line_count,moddate)
                  values(?,?,?,?,concat(CURDATE(),':',CURTIME()))";
my $qh_insert_log = $dbh->prepare($insert_log)or die "Couldn't prepare statement: " . $dbh->errstr;


my $chrId="select chromosome_id from chromosome where chromosome_name=?";
my $qh_chrId=$dbh->prepare($chrId);

my $getOrg="select organism_version_id from organism_version where ucsc_db=?";   #get current organisms list 
my $qh_orgvlist= $dbh->prepare($getOrg)or die "Couldn't prepare statement: " . $dbh->errstr;
## get the gene_prediction_id
my $get_predict_id="select gene_prediction_id from gene_prediction where gene_prediction_name=?";
my $qh_get_predict_id= $dbh->prepare($get_predict_id)or die "Couldn't prepare statement: " . $dbh->errstr;

## delete the entry of this gene_prediction_id and organism_version_id from gene_prediction_by_organism
my $dele_predict_id="delete from gene_prediction_by_organism where organism_version_id=? and gene_prediction_id=?";
my $qh_dele_predict_id= $dbh->prepare($dele_predict_id)or die "Couldn't prepare statement: " . $dbh->errstr;

## insert the entry of this gene_prediction_id and organism_version_id into gene_prediction_by_organism
my $insert_predict_id="insert ignore into gene_prediction_by_organism values(?,?, concat(CURDATE(),':',CURTIME()))";
my $qh_update_genePredByOrganism= $dbh->prepare($insert_predict_id)or die "Couldn't prepare statement: " . $dbh->errstr;

#print T "$transcript_id\t$chromosome\t$strand\t$txstart\t$txend\t$orgv_id\n"
my $drop_tx_temp="drop temporary table if exists transcript_temp";
my $qh_drop_tx_temp = $dbh->prepare($drop_tx_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
# print T "$transcript_id\t$chromosome\t$strand\t$txstart\t$txend\t$orgv_id\n";
my $create_tx_temp="create temporary table transcript_temp(tx_id int unsigned default 0,
          chr_id mediumint unsigned default 0,strand char(1),tx_start int unsigned default 0,
          tx_end int unsigned default 0,organism_version_id smallint default 0,
         index(tx_id),index(organism_version_id),index(chr_id,strand,tx_start,tx_end))";
my $qh_create_tx_temp = $dbh->prepare($create_tx_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $load_tx_temp="load data local infile ? into table transcript_temp";
my $qh_load_tx_temp = $dbh->prepare($load_tx_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $update_tx_temp="update transcript_temp t, transcript m ";
   $update_tx_temp.="set t.tx_id=m.transcript_id ";
   $update_tx_temp.=" where t.organism_version_id=m.organism_version_id and ";
   $update_tx_temp.=" t.chr_id =m.chromosome_id and t.strand=m.strand ";
   $update_tx_temp.=" and t.tx_start=m.tx_start and t.tx_end=m.tx_end "; 
my $qh_update_tx_temp = $dbh->prepare($update_tx_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $insert_tx="insert into transcript(organism_version_id,chromosome_id,strand,tx_start,tx_end) ";
   $insert_tx.="select distinct organism_version_id,chr_id,strand,tx_start,tx_end from transcript_temp where tx_id=0 ";
my $qh_insert_tx = $dbh->prepare($insert_tx)or die "Couldn't prepare statement: " . $dbh->errstr;

my $get_tx_rowcount="select count(*) as rowcount from transcript_temp ";
my $qh_get_tx_rowcount = $dbh->prepare($get_tx_rowcount)or die "Couldn't prepare statement: " . $dbh->errstr;

my $drop_ex_temp="drop temporary table if exists exon_temp";
#print E "$exon_id\t$chromosome\t$strand\t$exstart\t$exend\t$orgv_id\n";
my $qh_drop_ex_temp = $dbh->prepare($drop_ex_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $create_ex_temp="create temporary table exon_temp(ex_id int unsigned default 0,
          chr_id mediumint unsigned default 0,strand char(1),ex_start int unsigned default 0,
          ex_end int unsigned default 0,organism_version_id smallint default 0,
         index(ex_id),index(organism_version_id),index(chr_id,strand,ex_start,ex_end))";
my $qh_create_ex_temp = $dbh->prepare($create_ex_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $load_ex_temp="load data local infile ? into table exon_temp";
my $qh_load_ex_temp = $dbh->prepare($load_ex_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $update_ex_temp="update exon_temp t, exon m ";
   $update_ex_temp.="set t.ex_id=m.exon_id ";
   $update_ex_temp.=" where t.organism_version_id=m.organism_version_id and ";
   $update_ex_temp.=" t.chr_id =m.chromosome_id and t.strand=m.strand ";
   $update_ex_temp.=" and t.ex_start=m.exon_start and t.ex_end=m.exon_end "; 
my $qh_update_ex_temp = $dbh->prepare($update_ex_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $insert_ex="insert into exon(organism_version_id,chromosome_id,strand,exon_start,exon_end) ";
   $insert_ex.="select organism_version_id,chr_id,strand,ex_start,ex_end from exon_temp where ex_id=0 ";
my $qh_insert_ex = $dbh->prepare($insert_ex)or die "Couldn't prepare statement: " . $dbh->errstr;
my $get_ex_rowcount="select count(*) as rowcount from exon_temp ";
my $qh_get_ex_rowcount = $dbh->prepare($get_ex_rowcount)or die "Couldn't prepare statement: " . $dbh->errstr;

my $drop_ta_temp="drop temporary table if exists transcript_by_annotation_temp";
my $qh_drop_ta_temp = $dbh->prepare($drop_ta_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
# print TA "$trans_id\t$chr_id\t$tx_id\t$strand\t$tstart\t$tend\t$prediction_id\t$orgv_id\n";
my $create_ta_temp="create temporary table transcript_by_annotation_temp(
          tx_id int unsigned default 0,
          chr_id mediumint unsigned default 0,transcript_name varchar(255),strand char(1),tx_start int unsigned default 0,
          tx_end int unsigned default 0,prediction_id tinyint unsigned,
          organism_version_id smallint default 0,
         index(tx_id),index(organism_version_id),index(prediction_id),index(chr_id,strand,tx_start,tx_end))";
my $qh_create_ta_temp = $dbh->prepare($create_ta_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $load_ta_temp="load data local infile ? into table transcript_by_annotation_temp";
my $qh_load_ta_temp = $dbh->prepare($load_ta_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $update_ta_temp="update transcript_by_annotation_temp t, transcript_temp m ";
   $update_ta_temp.="set t.tx_id=m.tx_id where t.organism_version_id=m.organism_version_id and ";
   $update_ta_temp.=" t.chr_id =m.chr_id and t.strand=m.strand ";
   $update_ta_temp.=" and t.tx_start=m.tx_start and t.tx_end=m.tx_end "; 
my $qh_update_ta_temp = $dbh->prepare($update_ta_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $delete_ta_temp="delete from transcript_by_annotation  where organism_version_id=? and gene_prediction_id=?  ";
my $qh_delete_ta_temp = $dbh->prepare($delete_ta_temp)or die "Couldn't prepare statement: " . $dbh->errstr;

my $insert_ta="insert ignore into transcript_by_annotation(organism_version_id,transcript_name,transcript_id,gene_prediction_id) ";
   $insert_ta.="select distinct organism_version_id,transcript_name,tx_id,prediction_id from transcript_by_annotation_temp where tx_id>0";
my $qh_insert_ta = $dbh->prepare($insert_ta)or die "Couldn't prepare statement: " . $dbh->errstr;
my $get_ta_rowcount="select count(*) as rowcount from transcript_by_annotation_temp ";
my $qh_get_ta_rowcount = $dbh->prepare($get_ta_rowcount)or die "Couldn't prepare statement: " . $dbh->errstr;
#print TL "$trans_id\t$transcript_name\t$chr_id\t$strand\t$tstart\t$tend\t$cds_start\t$cds_end\t$prediction_id\t$orgv_id\n";
my $drop_tl_temp="drop temporary table if exists transcript_translation_temp";
my $qh_drop_tl_temp = $dbh->prepare($drop_tl_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $create_tl_temp="create temporary table transcript_translation_temp(
          tx_id int unsigned default 0,transcript_name varchar(255) not null,
          chr_id mediumint unsigned default 0,strand char(1),tx_start int unsigned default 0,
          tx_end int unsigned default 0,cds_start int unsigned default 0,
          cds_end int unsigned default 0,prediction_id tinyint unsigned,
          organism_version_id smallint default 0,
         index(tx_id),index(organism_version_id),index(chr_id,strand,tx_start,tx_end))";
my $qh_create_tl_temp = $dbh->prepare($create_tl_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $load_tl_temp="load data local infile ? into table transcript_translation_temp";
my $qh_load_tl_temp = $dbh->prepare($load_tl_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $update_tl_temp="update transcript_translation_temp t, transcript_temp m ";
   $update_tl_temp.="set t.tx_id=m.tx_id where t.organism_version_id=m.organism_version_id and ";
   $update_tl_temp.=" t.chr_id =m.chr_id and t.strand=m.strand ";
   $update_tl_temp.=" and t.tx_start=m.tx_start and t.tx_end=m.tx_end "; 
my $qh_update_tl_temp = $dbh->prepare($update_tl_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $delete_tl_temp="delete from transcript_translation  where organism_version_id=? and gene_prediction_id=? ";
my $qh_delete_tl_temp = $dbh->prepare($delete_tl_temp)or die "Couldn't prepare statement: " . $dbh->errstr;

my $insert_tl="insert ignore into transcript_translation(organism_version_id,transcript_name,transcript_id,gene_prediction_id,cdsStart,cdsEnd) ";
   $insert_tl.="select distinct organism_version_id,transcript_name,tx_id,prediction_id,
                  cds_start,cds_end from transcript_translation_temp where tx_id>0";

my $qh_insert_tl = $dbh->prepare($insert_tl)or die "Couldn't prepare statement: " . $dbh->errstr;
my $get_tl_rowcount="select count(*) as rowcount from transcript_translation_temp ";
my $qh_get_tl_rowcount = $dbh->prepare($get_tl_rowcount)or die "Couldn't prepare statement: " . $dbh->errstr;

my $drop_te_temp="drop temporary table if exists transcript_exon_temp";
my $qh_drop_te_temp = $dbh->prepare($drop_te_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $create_te_temp="create temporary table transcript_exon_temp(transcript_name varchar(255) not null,
          tx_id int unsigned default 0,ex_id int unsigned default 0,chr_id mediumint unsigned default 0,
          strand char(1),tx_start int unsigned default 0,tx_end int unsigned default 0,
          ex_start int unsigned default 0,ex_end int unsigned default 0,prediction_id tinyint unsigned,
          ex_frame tinyint default -1,organism_version_id smallint default 0,
         index(tx_id),index(ex_id),index(organism_version_id),index(chr_id,strand,tx_start,tx_end))";
my $qh_create_te_temp = $dbh->prepare($create_te_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $load_te_temp="load data local infile ? into table transcript_exon_temp";
my $qh_load_te_temp = $dbh->prepare($load_te_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $update_te_temp="update transcript_exon_temp t, transcript_temp m ";
   $update_te_temp.="set t.tx_id=m.tx_id where t.organism_version_id=m.organism_version_id and ";
   $update_te_temp.=" t.chr_id =m.chr_id and t.strand=m.strand ";
   $update_te_temp.=" and t.tx_start=m.tx_start and t.tx_end=m.tx_end "; 
my $qh_update_te_temp = $dbh->prepare($update_te_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $update_te_e_temp="update transcript_exon_temp t,exon_temp m ";
   $update_te_e_temp.="set t.ex_id=m.ex_id where t.organism_version_id=m.organism_version_id and ";
   $update_te_e_temp.=" t.chr_id =m.chr_id and t.strand=m.strand ";
   $update_te_e_temp.=" and t.ex_start=m.ex_start and t.ex_end=m.ex_end "; 
my $qh_update_te_e_temp = $dbh->prepare($update_te_e_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $delete_te_temp="delete from transcript_exon  where organism_version_id=? and gene_prediction_id=? ";
my $qh_delete_te_temp = $dbh->prepare($delete_te_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $insert_te="insert ignore into transcript_exon(organism_version_id,transcript_name,transcript_id,exon_id,gene_prediction_id,exon_frame) ";
   $insert_te.="select distinct organism_version_id,transcript_name,tx_id,ex_id,prediction_id,
                  ex_frame from transcript_exon_temp where tx_id>0 and ex_id>0";
my $qh_insert_te = $dbh->prepare($insert_te)or die "Couldn't prepare statement: " . $dbh->errstr;
my $get_te_rowcount="select count(*) as rowcount from transcript_exon_temp ";
my $qh_get_te_rowcount = $dbh->prepare($get_te_rowcount)or die "Couldn't prepare statement: " . $dbh->errstr;
my $drop_ga_temp="drop temporary table if exists gene_by_annotation_temp";
my $qh_drop_ga_temp = $dbh->prepare($drop_ga_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $create_ga_temp="create temporary table gene_by_annotation_temp(
          tx_id int unsigned default 0,gene_name varchar(255),
          chr_id mediumint unsigned default 0,strand char(1),tx_start int unsigned default 0,
          tx_end int unsigned default 0,prediction_id tinyint unsigned,
          organism_version_id smallint default 0,found tinyint default 0,
         index(tx_id),index(organism_version_id),index(chr_id,strand,tx_start,tx_end))";
my $qh_create_ga_temp = $dbh->prepare($create_ga_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $load_ga_temp="load data local infile ? into table gene_by_annotation_temp";
my $qh_load_ga_temp = $dbh->prepare($load_ga_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $update_ga_temp="update gene_by_annotation_temp t, transcript_temp m ";
   $update_ga_temp.="set t.tx_id=m.tx_id where t.organism_version_id=m.organism_version_id and ";
   $update_ga_temp.=" t.chr_id =m.chr_id and t.strand=m.strand ";
   $update_ga_temp.=" and t.tx_start=m.tx_start and t.tx_end=m.tx_end "; 
my $qh_update_ga_temp = $dbh->prepare($update_ga_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $delete_ga_temp="delete from gene_by_annotation where organism_version_id=? and gene_prediction_id=? ";
my $qh_delete_ga_temp = $dbh->prepare($delete_ga_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $insert_ga="insert ignore into gene_by_annotation(organism_version_id,gene_name,transcript_id,gene_prediction_id)";
   $insert_ga.="select distinct organism_version_id,gene_name,tx_id,prediction_id from gene_by_annotation_temp where tx_id>0 ";
my $qh_insert_ga = $dbh->prepare($insert_ga)or die "Couldn't prepare statement: " . $dbh->errstr;
my $get_ga_rowcount="select count(*) as rowcount from gene_by_annotation_temp ";
my $qh_get_ga_rowcount = $dbh->prepare($get_ga_rowcount)or die "Couldn't prepare statement: " . $dbh->errstr;

my $drop_ea_temp="drop temporary table if exists ensembl_exons_temp";
my $qh_drop_ea_temp = $dbh->prepare($drop_ea_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
#print EA "$ex_id\t$chr_id\t$strand\t$exonStart\t$exonEnd\t$orgv_id\t$eid\n";
my $create_ea_temp="create temporary table ensembl_exons_temp(
          ex_id int unsigned default 0, chr_id mediumint unsigned default 0,strand char(1),ex_start int unsigned default 0,
          ex_end int unsigned default 0,organism_version_id smallint default 0,accession_id varchar(50),
         index(ex_id),index(organism_version_id),index(chr_id,strand,ex_start,ex_end))";
my $qh_create_ea_temp = $dbh->prepare($create_ea_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $load_ea_temp="load data local infile ? into table ensembl_exons_temp";
my $qh_load_ea_temp = $dbh->prepare($load_ea_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $update_ea_temp="update ensembl_exons_temp t, exon_temp m ";
   $update_ea_temp.="set t.ex_id=m.ex_id where t.organism_version_id=m.organism_version_id and ";
   $update_ea_temp.=" t.chr_id =m.chr_id and t.strand=m.strand ";
   $update_ea_temp.=" and t.ex_start=m.ex_start and t.ex_end=m.ex_end "; 
my $qh_update_ea_temp = $dbh->prepare($update_ea_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $delete_ea_temp="delete from ensembl_exons where organism_version_id=?";
my $qh_delete_ea_temp = $dbh->prepare($delete_ea_temp)or die "Couldn't prepare statement: " . $dbh->errstr;
my $insert_ea="insert ignore into ensembl_exons(exon_id,organism_version_id,accession_id )";
   $insert_ea.="select distinct ex_id,organism_version_id,accession_id from ensembl_exons_temp where ex_id>0 ";
my $qh_insert_ea = $dbh->prepare($insert_ea)or die "Couldn't prepare statement: " . $dbh->errstr;
my $get_ea_rowcount="select count(*) as rowcount from ensembl_exons_temp ";
my $qh_get_ea_rowcount = $dbh->prepare($get_ea_rowcount)or die "Couldn't prepare statement: " . $dbh->errstr;



my $qh_del_est_align= $dbh->prepare("delete from est_align where organism_version_id=?");
my $qh_load_est_align= $dbh->prepare("load data local infile ? into table est_align");
my $qh_get_est_alignRows=$dbh->prepare("select count(*) from est_align where organism_version_id=?");

my $qh_del_est_orient= $dbh->prepare("delete from est_orientation where organism_version_id=?");
my $qh_load_est_orient= $dbh->prepare("load data local infile ? into table est_orientation");
my $qh_get_est_orientRows=$dbh->prepare("select count(*) from est_orientation where organism_version_id=?");

my $analyze="ANALYZE TABLE transcript,exon,transcript_by_annotation,transcript_exon,";
    $analyze.="transcript_translation,gene_by_annotation,gene_prediction_by_organism,est_align,est_orientation";
my $qh_analyze=$dbh->prepare($analyze);


my %orgmap=();$opt_o=$opt_d;%sample_map=();%sample_dates="";$path="";if($opt_d){$path="$opt_d/";}
#get the list of all organisms
$text_file=$opt_f; $gene_prediction=$opt_a;$more=1; my @annots=();$rows="";$oversion=$opt_v;
open(LOG,">>$path$oversion-$gene_prediction-log.txt");
if(LOG){
  $tm = localtime;
  my ($sec,$min,$hour,$mday, $mon, $yday) = ($tm->sec,$tm->min,$tm->hour,$tm->mday, ($tm->mon)+1, ($tm->year)+1900);
  print LOG "\n*************************************************************\n";
  print LOG "Starting load process :  $mday/$mon/$yday @ $hour:$min:$sec \n";
  print LOG "\n*************************************************************\n";
  $prediction_id=0;$orgv_id=0; $qh_orgvlist->execute($oversion);
  $update_table="$oversion-$gene_prediction"; 
 ($orgv_id)=$qh_orgvlist->fetchrow_array();
  $qh_get_predict_id->execute($gene_prediction);
 ($prediction_id)=$qh_get_predict_id->fetchrow_array();
  #print "Processing $text_file\n";
  if(-f "$text_file"){ $rowcount=0;$linecont=0;
         my %exonmap=(); my %transcriptmap=();#WE will generate unique local id for tx and exons
         $transcript="$path"."_tempfile-$gene_prediction-transcript.txt";
         $exon="$path"."_tempfile-$gene_prediction-exon.txt"; 
         $exon_ids="$path"."_tempfile-$gene_prediction-exonids.txt"; 
         $transcript_by_annotation="$path"."_tempfile-$gene_prediction-transcript_by_annotation.txt";        
         $transcript_translation="$path"."_tempfile-$gene_prediction-transcript_translation.txt";
         $transcript_exon="$path"."_tempfile-$gene_prediction-transcript_exon.txt";
         $gene_by_annotation="$path"."_tempfile-$gene_prediction-gene_by_annotation.txt";
         $est_align="$path"."_tempfile-$gene_prediction-est_align.txt";
         $est_orientation="$path"."_tempfile-$gene_prediction-est_orientation.txt";
         if($opt_a=~/all_est/){open(ESTA,">$est_align");}
         elsif($opt_a=~/estOrientInfo/){open(ESTO,">$est_orientation");}
         else{
            open(T,">$transcript")or die "$transcript :$!\n";open(E,">$exon") or die "$exon :$!\n";
            open(TA,">$transcript_by_annotation") or die "$transcript_by_annotation :$!\n";
            open(TL,">$transcript_translation");open(EA,">$exon_ids");
            open(TE,">$transcript_exon");open(GA,">$gene_by_annotation");
          }
         open(FH,"$text_file") or die "Bad file : $!\n"; $lcount=0;
         if(FH){
            $header=<FH>;chomp($header);$line="";@fields=split("\t",$header);
            if(@fields>0){$index=0;
                while(@fields>0){$field=shift(@fields);chomp($field);$line.=",$field>$index"; ++$index;}
            }
            ################# Get index of fields
            $nameindex=-1;$chromindex=-1;$strandindex=-1;$txStartindex=-1;$exonSizesindex=-1;
            $txEndindex=-1;$cdsStartindex=-1;$cdsEndindex=-1;$exonCountindex=-1;$exonStartsindex=-1; 
            $exonEndsindex=-1;$name2index=-1;$exonFramesindex=-1;$matchesindex=-1;$misMatchesindex=-1;
            $qNameindex=-1;$qSizeindex=-1;$qStartindex=-1;$qEndindex=-1;$sizePolyAindex=-1;$exonIdsindex=-1;
            $revSizePolyAindex=-1;$signalPosindex=-1;$revSignalPosindex=-1;$chromStartindex=-1;
            $sample_nameindex=-1; $sample_dateindex=-1;
            $chromEndindex=-1;$proteinIDindex=-1;$has_block_size=0;%chrom_map=();
            if($line=~/,chrom>(\d+)/i){$chromindex=$1;}if($line=~/,name>(\d+)/i){$nameindex=$1;}
            if($line=~/,strand>(\d+)/i){$strandindex=$1;}if($line=~/,txStart>(\d+)/i){$txStartindex=$1;}
            if($line=~/,txEnd>(\d+)/i){$txEndindex=$1;}if($line=~/,cdsStart>(\d+)/i){$cdsStartindex=$1;}
            if($line=~/,cdsEnd>(\d+)/i){$cdsEndindex=$1;}if($line=~/,exonCount>(\d+)/i){$exonCountindex=$1;}
            if($line=~/,exonStarts>(\d+)/i){$exonStartsindex=$1;}if($line=~/,exonEnds>(\d+)/i){$exonEndsindex=$1;}
            if($line=~/,tStarts>(\d+)/i){$exonStartsindex=$1;}
            if($line=~/,exonIds>(\d+)/i){$exonIdsindex=$1;}
            if($line=~/,name2>(\d+)/i){$name2index=$1;}if($line=~/,exonFrames>(\d+)/i){$exonFramesindex=$1;}
            if($line=~/,chromStart>(\d+)/i){$txStartindex=$1;}if($line=~/,chromEnd>(\d+)/i){$txEndindex=$1;}
            if($line=~/,proteinID>(\d+)/i){$proteinIDindex=$1;}if($line=~/,matches>(\d+)/i){$matchesindex=$1;}
            if($line=~/,misMatches>(\d+)/i){$misMatchesindex=$1;}if($line=~/,tName>(\d+)/i){$chromindex=$1;}
            if($line=~/,qName>(\d+)/i){$nameindex=$1;}if($line=~/,tStart>(\d+)/i){$txStartindex=$1;}
            if($line=~/,tEnd>(\d+)/i){$txEndindex=$1;}if($line=~/,qStart>(\d+)/i){$qStartindex=$1;}
            if($line=~/,qEnd>(\d+)/i){$qEndindex=$1;}if($line=~/,qSize>(\d+)/i){$qSizeindex=$1;}
            if($line=~/,sizePolyA>(\d+)/i){$sizePolyAindex=$1;}if($line=~/,revSizePolyA>(\d+)/i){$revSizePolyAindex=$1;}
            if($line=~/,signalPos>(\d+)/i){$signalPosindex=$1;}if($line=~/,revSignalPos>(\d+)/i){$revSignalPosindex=$1;}
            if($line=~/,blockSizes>(\d+)/i){$exonSizesindex=$1; $has_block_size=1;}
            while($line=<FH>){ chomp($line);
                ################################################################
                @content=split("\t",$line);
                $name="";$strand="";$txStart=0;$txEnd=0;$cdsStart=0;$cdsEnd=0;$exonCount=0;
                $exonStarts="";$exonEnds="";$exonIds="";$name2="";$exonFrames="";$proteinID="";$score=0;
                $exonSizes="";$matches=-1;$misMatches=-1;$qStart=-1;$qEnd=-1;$qSize=-1;$sizePolyA=-1;
                $revSizePolyA=-1;$signalPos=-1;$revSignalPos=-1;$trans_id=0;$ex_id=0;
                $chrom=$content[$chromindex]if($chromindex>=0 && $chromindex<@content);
                $name=$content[$nameindex] if($nameindex>=0 && $nameindex<@content);
                $strand=$content[$strandindex] if($strandindex>=0 && $strandindex<@content);
                $txStart=$content[$txStartindex] if($txStartindex>=0 && $txStartindex<@content);
                $txEnd=$content[$txEndindex] if($txEndindex>=0 && $txEndindex<@content);
                $cdsStart=$content[$cdsStartindex] if($cdsStartindex>=0 && $cdsStartindex<@content);
                $cdsEnd=$content[$cdsEndindex] if($cdsEndindex>=0 && $cdsEndindex<@content);
                $exonCount=$content[$exonCountindex] if($exonCountindex>=0 && $exonCountindex<@content);
                $exonStarts=$content[$exonStartsindex] if($exonStartsindex>=0 && $exonStartsindex<@content);
                $exonEnds=$content[$exonEndsindex] if($exonEndsindex>=0 && $exonEndsindex<@content);
                $exonIds=$content[$exonIdsindex] if($exonIdsindex>=0 && $exonIdsindex<@content);
                $name2=$content[$name2index] if($name2index>=0 && $name2index<@content);
                $exonFrames=$content[$exonFramesindex] if($exonFramesindex>=0 && $exonFramesindex<@content);
                $proteinID=$content[$proteinIDindex] if($proteinIDindex>=0 && $proteinIDindex<@content);
                $matches=$content[$matchesindex] if($matchesindex>=0 && $matchesindex<@content);
                $misMatches=$content[$misMatchesindex] if($misMatchesindex>=0 && $misMatchesindex<@content);
                $qStart=$content[$qStartindex] if($qStartindex>=0 && $qStartindex<@content);
                $qEnd=$content[$qEndindex] if($qEndindex>=0 && $qEndindex<@content);
                $qSize=$content[$qSizeindex] if($qSizeindex>=0 && $qSizeindex<@content);
                $sizePolyA=$content[$sizePolyAindex] if($sizePolyAindex>=0 && $sizePolyAindex<@content);
                $revSizePolyA=$content[$revSizePolyAindex] if($revSizePolyAindex>=0 && $revSizePolyAindex<@content);
                $signalPos=$content[$signalPosindex] if($signalPosindex>=0 && $signalPosindex<@content);
                $revSignalPos=$content[$revSignalPosindex] if($revSignalPosindex>=0 && $revSignalPosindex<@content);
                $exonSizes=$content[$exonSizesindex] if($exonSizesindex>=0 && $exonSizesindex<@content);
                $chr_id=0; $chr=$chrom;$chr=~s/^\s*//;$chr=~s/\s*$//;$chr=~s/chr//i;$strand=~s/\s*//g;$txStart=~s/\s*//g;

                $txEnd=~s/\s*//g;$chr=~s/\s*//g;$chr="M" if($chr=~/^M$|^MT$/i); $chr="U" if($chr=~/^U$|^UN$/i); 
                if(!exists($chrom_map{$chr})){$qh_chrId->execute($chr);
                    if($qh_chrId->rows>0){($chr_id)= $qh_chrId->fetchrow_array();$chrom_map{$chr}=$chr_id;}
                 }
                else{$chr_id=$chrom_map{$chr};}next if(($chr_id<=0)|| ($txStart<=0)||($txEnd<=0));
                if($opt_s ==1){$txStart-=1;}#adjust txStart to zero-base cordrinate
                if($opt_e !=1){$txEnd+=1;}#adjust txEnd to one-base cordrinate
                if($opt_a=~/estOrientInfo/i){ #est_all table
                   $row="$orgv_id\t$name\t$chr_id\t$txStart\t$txEnd\t$sizePolyA\t$revSizePolyA\t";
                   $row.="$signalPos\t$revSignalPos\n";
                   if($orgv_id>0){print ESTO "$row";}
                }elsif($opt_a=~/all_est/i){ 
                   if($opt_s ==1){$qStart-=1;}#adjust qStart to zero-base cordrinate
                   if($opt_e !=1){$qEnd+=1;} #adjust qEnd to one-base cordrinate
                   $row="$orgv_id\t$matches\t$misMatches\t$strand\t$name\t$qSize\t";
                   $row.="$qStart\t$qEnd\t$chr_id\t$txStart\t$txEnd\n";
                   if($orgv_id>0){
                       print ESTA "$row";
                    }
                }
                else{
                   #display this transcript
                   next if(($strand ne "+")&& ($strand ne "-"));
                   @startExons=();@endExons=();@exonFrames=();@blocksizes=();
                   @startExons=split(",",$exonStarts) if($exonStarts ne "");$tx_id=$name;
                   @endExons=split(",",$exonEnds) if($exonEnds ne "");$exon_frame=-1;$exist=0;
                   @exonFrames=split(",",$exonFrames)if($exonFrames ne ""); $trans_id=0;$ex_id=0;
                   @blocksizes=split(",",$exonSizes)if($exonSizes ne "");
                   if($opt_a=~/all_mrna/){#mRNA data
                      if(@startExons==@blocksizes){
                         $i=0;while($i<@startExons){$endExons[$i]=$startExons[$i]+$blocksizes[$i];++$i;}
                      }
                   }
                   @exonIdss=();@exonIdss=split(",",$exonIds) if($exonIds ne "");
                   if(@startExons==@endExons){
                      while(@startExons>0){
                        $exonStart=shift(@startExons);$exon_frame=-1;$eid="";
                        if(@endExons>0){$exonEnd=shift(@endExons);
                           $exon_frame=shift(@exonFrames)if(@exonFrames>0);
                           $eid=shift(@exonIdss)if(@exonIdss>0);
                        }
                        if(($exonStart=~/^\s*\d+\s*$/)&&($exonEnd=~/^\s*\d+\s*$/)){
                          if($opt_s ==1){$exonStart-=1;}#adjust exonStart to zero-base cordrinate
                          if($opt_e !=1){$exonEnd+=1;}  #adjust exonEnd to one-base cordrinate
                          print TE "$name\t$trans_id\t$ex_id\t$chr_id\t$strand\t$txStart\t$txEnd\t";
                          print TE "$exonStart\t$exonEnd\t$prediction_id\t$exon_frame\t$orgv_id\n";
                          print EA "$ex_id\t$chr_id\t$strand\t$exonStart\t$exonEnd\t$orgv_id\t$eid\n" if($eid ne "");
                          $exonmap{$chr_id}{$strand}{$exonStart}{$exonEnd}=$ex_id;
                        }
                     } #end of @startExons>0
                   } #end of @startExons==@endExons
                 ##################################################
                 $transcriptmap{$chr_id}{$strand}{$txStart}{$txEnd}=$trans_id;
                 if($opt_a=~/knownGene/){$name2=$tx_id;}
                 #display transcript_by_annotation TA
                 print TA "$trans_id\t$chr_id\t$name\t$strand\t$txStart\t$txEnd\t$prediction_id\t$orgv_id\n";
                 if(($name2 ne "")&&(length($name2)!=0)){
                    @genesl=split(",",$name2);
                    foreach $name3(@genesl){
                    print GA "$trans_id\t$name3\t$chr_id\t$strand\t$txStart\t$txEnd\t$prediction_id\t$orgv_id\n";
                    }
                 }
                 if(($cdsStart>0)&&( $cdsEnd>0)){
                     if($opt_s ==1){$cdsStart-=1;}#adjust cdsStart to zero-base cordrinate
                     if($opt_e !=1){$cdsEnd+=1;}  #adjust cdsEnd to one-base cordrinate
                     print TL "$trans_id\t$name\t$chr_id\t$strand\t$txStart\t$txEnd\t";
                     print TL "$cdsStart\t $cdsEnd\t$prediction_id\t$orgv_id\n";
                  }
                }
             } #end of while(<FH>){
         } #end of if(FH){
         close(FH); 
     # print "Generating tx keys\n";  
       #now generate and display transcripts
     if(keys(%transcriptmap)>0){
        #print "Generating tx keys\n"; 
       $transcript_id=0;$exists=0; $exon_id=0;
       for my $chromosome(sort keys(%transcriptmap)){
           for my $strand (sort keys (%{$transcriptmap{$chromosome}})){
                for my $txstart(sort keys(%{$transcriptmap{$chromosome}{$strand}})){
                     for my $txend(sort keys(%{$transcriptmap{$chromosome}{$strand}{$txstart}})){
                           print T "$transcript_id\t$chromosome\t$strand\t$txstart\t$txend\t$orgv_id\n"; 
                     }
                }
            }
         }
       }
       #now display exons 
       if(keys(%exonmap)){
          $exon_id=0;
         for my $chromosome(sort keys(%exonmap)){
             for my $strand (sort keys (%{$exonmap{$chromosome}})){
                 for my $exstart(sort keys(%{$exonmap{$chromosome}{$strand}})){
                      for my $exend(sort keys(%{$exonmap{$chromosome}{$strand}{$exstart}})){
                           $exon_id=$exonmap{$chromosome}{$strand}{$exstart}{$exend};
                           if(($exend>0)&&($exon_id<=0)){
                               print E "$exon_id\t$chromosome\t$strand\t$exstart\t$exend\t$orgv_id\n";
                            }
                       }
                  }
              }
         }
       }
       #close generated files
      close(T);close(E);close(TA);close(TE);close(TL);close(GA);$tm = localtime;
      close(ESTA);close(ESTO);
      my ($sec,$min,$hour,$mday, $mon, $yday) = ($tm->sec,$tm->min,$tm->hour,$tm->mday, ($tm->mon)+1, ($tm->year)+1900);
      print LOG "Database Load starts:  $mday/$mon/$yday @ $hour:$min:$sec \n";$rowcount=0;$linecont=0;
     if($opt_a=~/est_all/i){
        $linecont = `wc -l $est_align`;chomp($linecont); #load transcript 
        if($linecont=~/^(\d+)\s$est_align/){$linecont=$1;
           $qh_del_est_align->execute($orgv_id);
           $qh_load_est_align->execute("$est_align");
           $qh_get_est_alignRows->execute($orgv_id);
           if($qh_get_est_alignRows->rows>0){($rowcount)=$qh_get_est_alignRows->fetchrow_array();}
           print LOG "$est_align Load detail: $rowcount of $linecont lines were loaded\n";
        }
     }
     elsif($opt_a=~/estOrientInfo/){
         $linecont = `wc -l $est_orientation`;chomp($linecont); #load transcript 
        if($linecont=~/^(\d+)\s$est_orientation/){$linecont=$1;
           $qh_del_est_orient->execute($orgv_id);
           $qh_load_est_orient->execute("$est_orientation");
           $qh_get_est_orientRows->execute($orgv_id);
           if($qh_get_est_orientRows->rows>0){($rowcount)=$qh_get_est_orientRows->fetchrow_array();}
           print LOG "$est_orientation Load detail: $rowcount of $linecont lines were loaded\n";
        }
     }
     else{ #loading transcript annotations
      $linecont = `wc -l $transcript`;chomp($linecont); #load transcript 
      if($linecont=~/^(\d+)\s$transcript/){$linecont=$1;
         if($linecont>0){
           $qh_drop_tx_temp->execute();$qh_create_tx_temp->execute();
           $qh_load_tx_temp->execute("$transcript");$qh_get_tx_rowcount->execute();
           ($rowcount)=$qh_get_tx_rowcount->fetchrow_array();
           if($linecont==$rowcount){
             $qh_update_tx_temp->execute();$qh_insert_tx->execute();$qh_update_tx_temp->execute();
           } 
           print LOG "$transcript Load detail: $rowcount of $linecont lines were loaded\n";#the bulk load did not go well
         }
      }
      $linecont = `wc -l $exon`;chomp($linecont); #load exon 
      if($linecont=~/^(\d+)\s$exon/){$linecont=$1;
         if($linecont>0){
           $qh_drop_ex_temp->execute();$qh_create_ex_temp->execute();
           $qh_load_ex_temp->execute("$exon");$qh_get_ex_rowcount->execute();
           ($rowcount)=$qh_get_ex_rowcount->fetchrow_array();
            if($linecont==$rowcount){
               $qh_update_ex_temp->execute();$qh_insert_ex->execute();$qh_update_ex_temp->execute();
            }print LOG "$exon Load detail: $rowcount of $linecont lines were loaded\n";
         }
       }
     $linecont = `wc -l $transcript_by_annotation`;chomp($linecont); #load transcript by annotation 
      if($linecont=~/^(\d+)\s$transcript_by_annotation/){$linecont=$1;
         if($linecont>0){
           $qh_drop_ta_temp->execute();$qh_create_ta_temp->execute();
           $qh_load_ta_temp->execute("$transcript_by_annotation");$qh_get_ta_rowcount->execute();
           ($rowcount)=$qh_get_ta_rowcount->fetchrow_array();
            if($linecont==$rowcount){$qh_update_ta_temp->execute() or die "transcrip_by_annot failed:".mysql_error();
               #$qh_delete_ta_temp->execute($orgv_id,$prediction_id) or die "del transcrip_by_annot failed:".mysql_error();
               $qh_insert_ta->execute() or die "insert transcrip_by_annot failed:".mysql_error();;
            }print LOG "$transcript_by_annotation Load detail: $rowcount of $linecont lines were loaded\n";
         }
       }
       $linecont = `wc -l $transcript_translation`;chomp($linecont); #load transcript by annotation 
      if($linecont=~/^(\d+)\s$transcript_translation/){$linecont=$1;
         if($linecont>0){
           $qh_drop_tl_temp->execute();$qh_create_tl_temp->execute();
           $qh_load_tl_temp->execute("$transcript_translation");$qh_get_tl_rowcount->execute();
           ($rowcount)=$qh_get_tl_rowcount->fetchrow_array();
            if($linecont==$rowcount){$qh_update_tl_temp->execute();
               #$qh_delete_tl_temp->execute($orgv_id,$prediction_id);
              $qh_insert_tl->execute();
             }print LOG "$transcript_translation Load detail: $rowcount of $linecont lines were loaded\n";
          }
       }
       $linecont = `wc -l $transcript_exon`;chomp($linecont); #load transcript exon 
      if($linecont=~/^(\d+)\s$transcript_exon/){$linecont=$1;
         if($linecont>0){
           $qh_drop_te_temp->execute();$qh_create_te_temp->execute();
           $qh_load_te_temp->execute("$transcript_exon");$qh_get_te_rowcount->execute();
           ($rowcount)=$qh_get_te_rowcount->fetchrow_array();
            if($linecont==$rowcount){$qh_update_te_temp->execute();
              $qh_update_te_e_temp->execute();#$qh_delete_te_temp->execute($orgv_id,$prediction_id);
              $qh_insert_te->execute();
            }print LOG "$transcript_exon Load detail: $rowcount of $linecont lines were loaded\n";
          }
       }
      $linecont = `wc -l $exon_ids`;chomp($linecont); #load ensembl exon ids
      if($linecont=~/^(\d+)\s$exon_ids/){$linecont=$1;
         if($linecont>1){
           $qh_drop_ea_temp->execute();$qh_create_ea_temp->execute();
           $qh_load_ea_temp->execute("$exon_ids");$qh_get_ea_rowcount->execute();
           ($rowcount)=$qh_get_ea_rowcount->fetchrow_array();
            if($linecont==$rowcount){$qh_update_ea_temp->execute();
              #$qh_delete_ea_temp->execute($orgv_id);
              $qh_insert_ea->execute();
            }print LOG "$exon_ids Load detail: $rowcount of $linecont lines were loaded\n";
         }
       }
      $linecont = `wc -l $gene_by_annotation`;chomp($linecont); #load gene by annotation 
      if($linecont=~/^(\d+)\s$gene_by_annotation/){$linecont=$1;
         if($linecont>0){
           $qh_drop_ga_temp->execute();$qh_create_ga_temp->execute();
           $qh_load_ga_temp->execute("$gene_by_annotation");$qh_get_ga_rowcount->execute();
           ($rowcount)=$qh_get_ga_rowcount->fetchrow_array();
            if($linecont==$rowcount){$qh_update_ga_temp->execute();
             # $qh_delete_ga_temp->execute($orgv_id,$prediction_id);
              $qh_insert_ga->execute();
            }print LOG "$gene_by_annotation Load detail: $rowcount of $linecont lines were loaded\n";
         }
       }
     } # end of loading transcript annotations
     $qh_dele_predict_id->execute($orgv_id,$prediction_id);
     $qh_update_genePredByOrganism->execute($orgv_id,$prediction_id);
     $qh_delete_log->execute($update_table);
     $qh_insert_log->execute($update_table,$text_file,$linecont,$rowcount);#clean generated files
     $path=$path."_tempfile-*";
      system("rm $path");   
  } #end of if(-f $test_file){
  $tm = localtime;
  my ($sec,$min,$hour,$mday, $mon, $yday) = ($tm->sec,$tm->min,$tm->hour,$tm->mday, ($tm->mon)+1, ($tm->year)+1900);
  print LOG "\n*************************************************************\n";
  print LOG "Program Ends:  $mday/$mon/$yday @ $hour:$min:$sec \n";
  print LOG "\n*************************************************************\n";
 close(LOG);
} #END OF if(LOG)
print "Porgram complete\n";
exit(0);


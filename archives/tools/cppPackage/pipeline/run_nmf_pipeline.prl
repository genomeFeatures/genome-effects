#! /usr/bin/perl

#my ($plot_no,$outfile,$states,$spacer,$h0_file,$string_length,$factor);
my($startAction,$stopAction,$infile,$prefix,$dryRun,$wc_L,$wc_z,$wc_w,$wc_k); # fa2Stats and WindowCount (wc) arguments
my($sm_r,$sm_pc,$sm_N); #nmfSmoothAndPseudo arguments
my($nmf_r,$nmf_t,$nmf_S,$nmf_I); # nmf arguments
my($bm_m,$bm_M,$bm_I,$bm_S,$bm_x,$bm_P,$bm_ff,$bm_N,$pwm_nEx); #nmfBuildMotif arguments
my($mm_m,$mm_t,$pwm_nEx); #nmfMotifsToModels and pwmToExamples arguments
my($site_lab);            #functional site label for x-axis plot on  positioning
my($ht_nw); #nmfWebPage option

open (RUNLOG, ">>run.log") || die "Can't open run.log\n";
my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdist);
($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdist)= localtime(time);
my $numArgs= $#ARGV +1; my $argnum;
print RUNLOG "nmf_pipeline.prl ";
foreach $argnum (0 .. $#ARGV) {
  print RUNLOG " $ARGV[$argnum]";
}
#my $inputLine= join(@ARGV);
###print RUNLOG @ARGV;
printf RUNLOG ": %4d-%02d-%02d %02d:%02d:%02d\n",$year+1900,$mon+1,$mday,$hour,$min,$sec;
close RUNLOG;



&GetOptions("a=i"=>\$startAction,
	    "p=i"=>\$stopAction,
	    "o=s"=>\$prefix,
	    "i=s"=>\$infile,
	    "d=s"=>\$dryRun,

	    "k=i"=>\$wc_k,
	    "w=i"=>\$wc_w,
	    "L|l=i"=>\$wc_L,
	    "z|Z=i"=>\$wc_z,

	    "smr=i"=>\$sm_r,
	    "smp=f"=>\$sm_pc,
	    "smN=i"=>\$sm_N,

	    "r=i"=>\$nmf_r,
	    "e=f"=>\$nmf_t,
	    "nmfI=i"=>\$nmf_I,
	    "nmfS=i"=>\$nmf_S,

	    "xLab=s"=>\$site_lab,

	    "bmS=i"=>\$bm_S,
	    "bmMinW=i"=>\$bm_m,
	    "bmMaxW=i"=>\$bm_M,
	    "bmP=i"=>\$bm_P,
	    "bmN=i"=>\$bm_N,
	    "bmI=i"=>\$bm_I,
	    "bmx=i"=>\$bm_x,
	    "bmff=f"=>\$bm_ff,

	    "mmMinIC=f"=>\$mm_t,
	    "mmMinW=i"=>\$mm_m,
	    "nEx=i"=>\$pwm_nEx,
	    "nWd=i"=>\$ht_nw
	   );
# force explicit naming (no defaults) of the following arguments:
#    -i  (infile),
#    -L  (sequence length),
#    -o  (output prefix),
#    -st (startAction)
#$prefix      = $prefix      ? $prefix      : "NMFout";
$stopAction  = $stopAction  ? $stopAction : 12;
$dryRun      = $dryRun      ? 1           : 0;
$site_lab    = $site_lab    ? $site_lab   : "3'-processing site";
#
$wc_k        = $wc_k        ? $wc_k     : 4;
$wc_w        = $wc_w        ? $wc_w     : 5;
$wc_z        = $wc_z        ? $wc_z     : 0;

#no defaults for the smoothing parameters $sm_pc and $sm_r 
$nmf_r       = $nmf_r       ? $nmf_r    : 8;
$nmf_t       = $nmf_t       ? $nmf_t    : 1.0e-6;
$nmf_S       = $nmf_S       ? $nmf_S    : 300;
$nmf_I       = $nmf_I       ? $nmf_I    : 1000;

$bm_I        = $bm_I        ? $bm_I     : 2000;
$bm_m        = $bm_m        ? $bm_m     : 4;
$bm_M        = $bm_M        ? $bm_M     : 8;
$bm_N        = $bm_N        ? $bm_N     : 1000;
$bm_x        = $bm_x        ? $bm_x     : 2;
$bm_P        = $bm_P        ? $bm_P     : 200;
$bm_S        = $bm_S        ? $bm_S     : 300;
$bm_ff       = $bm_ff       ? $bm_ff    : 1.0;

$mm_m        = $mm_m        ? $mm_m     : 4;
$mm_t        = $mm_t        ? $mm_t     : 0.2;
$pwm_nEx     = $pwm_nEx     ? $pwm_nEx  : 100;
$ht_nw       = $ht_nw       ? $ht_nw    : 10;
use strict;
use Getopt::Long;

if(! $infile) {
  print "You must specify an input file with the -i option\n";
  exit;
}
if(! $prefix) {
  print "You must specify the output file prefix with the -o option\n";
  exit;
}
if(! $wc_L) {
  print "You must specify the length of the sequences in the input file with the -L option\n";
  exit;
}
if(! $startAction) {
  print "You must specify the analysis starting point with the -a option\n";
  exit;
}

my $prefix1 = $prefix . ".w" . $wc_w . "k" . $wc_k;
my $prefix2 = $prefix . ".sw" . $wc_w . "k" . $wc_k;
my $prefix3 = $prefix . ".sw" . $wc_w . "k" . $wc_k . "r" . $nmf_r;
#print "k = $k\n\$w = $w\nL = $L\nZ = $Z\nprefix = $prefix\ninfile = $infile\nr = $r\nth = $th\n";

my $binDir  = "../bin";
my $logoDir = "../bin/weblogo";
if($startAction <= 1) {
  my $statComm = "$binDir/cpp/fa2Stats $infile -r 1 -o $prefix";
  print "#######################################################################################################\n";
  print "# (1) stat file build: $statComm\n";
  system($statComm) if(! $dryRun);
}

if($startAction <= 2 && $stopAction > 1) {
  print "\n#######################################################################################################\n";
  my $wcComm = "$binDir/cpp/WindowCount $infile -L $wc_L -z $wc_z -o $prefix1 -w $wc_w -k $wc_k -s2";
  print "# (2) WindowCount call: $wcComm\n";
  system($wcComm) if(! $dryRun);
}

if($startAction <= 3 && $stopAction > 2) {
  print "\n#######################################################################################################\n";
  my $smComm = "$binDir/cpp/nmfSmoothAndPseudoCounts $prefix1 -o $prefix2";
  $smComm = $smComm . " -r $sm_r"  if ($sm_r);
  $smComm = $smComm . " -p $sm_pc" if ($sm_pc);
  $smComm = $smComm . " -N $sm_N"  if ($sm_N);
  print "# (3) Smooth call: $smComm\n";
  system($smComm) if(! $dryRun);
}

if($startAction <= 4 && $stopAction > 3) {
  print "\n#######################################################################################################\n";
  my $nmfComm = "$binDir/cpp/nnmf $prefix2.counts.txt -t $nmf_t -r $nmf_r -I $nmf_I -S $nmf_S -o $prefix3";
  print "# (4) NMF call: $nmfComm\n";
  system($nmfComm) if(! $dryRun);
}

if($startAction <= 5 && $stopAction > 4) {
  print "\n#######################################################################################################\n";
  my $srtComm = "$binDir/cpp/nmfSortMatrix $prefix3 -o $prefix3";
  print "# (5) nmfSortMatrix call: $srtComm\n";
  system($srtComm) if(! $dryRun);
}

if($startAction <= 6 && $stopAction > 5) {
  print "\n#######################################################################################################\n";
  my $wpComm = "perl $binDir/perl/nmfWplot.prl $prefix3 -o $prefix3 -r $nmf_r -xL \"Position relative to $site_lab (nt) \" | gnuplot";
  print "# (6) nmfWplot call: $wpComm\n";
  system($wpComm) if(! $dryRun);
}

if($startAction <= 7 && $stopAction > 6) {
  print "\n#######################################################################################################\n";
  my $bmComm = "$binDir/cpp/nmfBuildMotifs $prefix3.bases.txt -m $bm_m -M $bm_M -S $bm_S -I $bm_I -x $bm_x -P $bm_P -f $bm_ff -B $prefix.stat -o $prefix3 -N $bm_N -multinomial";
  print "# (7) buildMotifs call: $bmComm\n";
  system($bmComm) if(! $dryRun);
}

if($startAction <= 8 && $stopAction > 7) {
  print "\n#######################################################################################################\n";
  my $mmComm = "$binDir/cpp/nmfMotifsToModels $prefix3 -o $prefix3 -m $mm_m -t $mm_t";
  print "# (8) nmfMotifsToModels call: $mmComm\n";
  system($mmComm) if(! $dryRun);
}

if($startAction <= 9 && $stopAction > 8) { 
  print "\n#######################################################################################################\n";
  my $pwmComm = "$binDir/cpp/pwmToExamples $prefix3.models.txt -n $pwm_nEx -o $prefix3 -sep";
  print "# (9) pwmToExamples call: $pwmComm\n";
  system($pwmComm) if(! $dryRun);
}

if($startAction <= 10 && $stopAction > 9) {
  print "\n#######################################################################################################\n";
  print "# (10) seqlogo calls:   \n";
  my $i;
  my $base= "A";
  for($i=0; $i<$nmf_r; $i++) {
    my $slCall= "$logoDir/seqlogo -f $prefix3.$base.logoEx.txt -F PNG -o $prefix3.$base -Y -c -a -e -p -n -w 12 -h 6 -x position -y bits";
    print "#   $slCall\n";
    #print "would run\n" if(! $dryRun);
    system($slCall) if(! $dryRun);
    $base++;
  }
}

if($startAction <= 11 && $stopAction > 10) {
  print "\n#######################################################################################################\n";
  my $wpComm = "$binDir/cpp/nmfWebPage $prefix3 $prefix1 $prefix -r $nmf_r -nw $ht_nw -i $infile";
  print "# (11) nmfWeb call: $wpComm\n\n";
  #print "would run\n" if(! $dryRun);
  system($wpComm) if(! $dryRun);
}

//////////////////////////////////////////////////////////////////////////////////////////////
#ifndef __wordstat_h
#define __wordstat_h
//////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <vector>
#include <functional>
using std::string; using std::vector; using std::unary_function; using std::binary_function;
typedef vector<int> iVec;
typedef vector<double> dVec;
//////////////////////////////////////////////////////////////////////////////////////////////
class PrincipalPeriods:public unary_function<string,iVec> {
 public:
  iVec operator()(const string& w) const;
};
//////////////////////////////////////////////////////////////////////////////////////////////
class AllPeriods:public unary_function<string,iVec> {
 public:
  iVec operator()(const string& w) const;
};
//////////////////////////////////////////////////////////////////////////////////////////////
class SchbathA:public binary_function<string,dVec,double> {
 public:
  double operator()(const string& w,const dVec& Ppre) const;
};
//////////////////////////////////////////////////////////////////////////////////////////////
class CompPoiss {
 protected:
  string w_;  int n_,x_; dVec Ppre_; double Pw_,Pval_;
  CompPoiss():w_(),n_(),x_(),Ppre_(),Pw_(),Pval_() {}
 public:
  CompPoiss(const CompPoiss& o):w_(o.w_),n_(o.n_),x_(o.x_),Ppre_(o.Ppre_),Pw_(o.Pw_),Pval_(o.Pval_) {}
  CompPoiss(const string& w,int n,int x,const dVec& Ppre,double Pw);
  double operator()() const { return Pval_; }
};
//////////////////////////////////////////////////////////////////////////////////////////////
#endif
//////////////////////////////////////////////////////////////////////////////////////////////
